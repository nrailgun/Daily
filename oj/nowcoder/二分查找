class BinarySearch {
public:
  int getPos(const vector<int> &A, int n, int val) {
    int lb = 0, ub = n - 1;

    while (lb <= ub) {
      int mid = lb + (ub - lb) / 2;

      if (A[mid] == val) {
        while (mid >= 0 && A[mid] == val)
          mid--;
        return mid + 1;
      }
      else if (A[mid] < val) {
        lb = mid + 1;
      }
      else {
        ub = mid - 1;
      }
    }
    return -1;
  }
};

void case_1() {
  BinarySearch sol;
  vector<int> A;
  int val;

  A = vector<int>({ });
  val = 100;
  assert(-1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 100 });
  val = 100;
  assert(0 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 101 });
  val = 100;
  assert(-1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 99 });
  val = 100;
  assert(-1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5 });
  val = 3;
  assert(0 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5 });
  val = 5;
  assert(1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5 });
  val = 4;
  assert(-1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5 });
  val = 2;
  assert(-1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5 });
  val = 6;
  assert(-1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5, 7 });
  val = 3;
  assert(0 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5, 7 });
  val = 5;
  assert(1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5, 7 });
  val = 7;
  assert(2 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5, 7 });
  val = 2;
  assert(-1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5, 7 });
  val = 8;
  assert(-1 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 3, 5, 7 });
  val = 3;
  assert(0 == sol.getPos(A, A.size(), val));

  A = vector<int>({ 3, 5, 5, 7 });
  val = 5;
  assert(1 == sol.getPos(A, A.size(), val));
}
